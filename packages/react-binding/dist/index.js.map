{"version":3,"file":"index.js","sources":["../src/components/PixelDust/PixelDust.tsx"],"sourcesContent":["import React from 'react';\nimport PixelDustApi, { LayerMetaData, InstrumentType } from '@pixel-dust/base';\n\ntype PixelDustProps = {\n  foregroundColor: string;\n  backgroundColor: string;\n  instrument: InstrumentType;\n  onLayerStackChange: (layerStack: LayerMetaData[]) => void;\n  onActiveLayerChange: (layer: LayerMetaData | null) => void;\n};\n\ntype PixelDustState = Record<string, undefined>;\n\nclass PixelDust extends React.Component<PixelDustProps, PixelDustState> {\n  pixelDustApi: PixelDustApi | undefined;\n\n  constructor(props: PixelDustProps) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount(): void {\n    const { onActiveLayerChange, onLayerStackChange } = this.props;\n\n    const mountTarget = document.querySelector('.pixel-dust-react-binding');\n    if (mountTarget) {\n      this.pixelDustApi = new PixelDustApi({\n        mountTarget: mountTarget as HTMLDivElement,\n        activeLayerUpdateCB: onActiveLayerChange,\n        layerStackUpdateCB: onLayerStackChange\n      });\n    } else {\n      console.error('Mount target not found');\n    }\n  }\n\n  shouldComponentUpdate(nextProps: PixelDustProps): boolean {\n    const { foregroundColor, backgroundColor, instrument } = this.props;\n    if (foregroundColor !== nextProps.foregroundColor) {\n      this.pixelDustApi?.setForegroundColor(nextProps.foregroundColor);\n    }\n    if (backgroundColor !== nextProps.backgroundColor) {\n      this.pixelDustApi?.setBackgroundColor(nextProps.backgroundColor);\n    }\n    if (instrument !== nextProps.instrument) {\n      this.pixelDustApi?.setInstrumentType(nextProps.instrument);\n    }\n    return false;\n  }\n\n  componentWillUnmount(): void {\n    this.pixelDustApi?.cleanUp();\n  }\n\n  render(): JSX.Element {\n    return (\n      <div\n        className=\"pixel-dust-react-binding\"\n        style={{\n          height: '100%',\n          width: '100%'\n        }}\n      />\n    );\n  }\n}\n\nexport default PixelDust;"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAawB,6BAA+C;IAGrE,mBAAY,KAAqB;QAAjC,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;KACjB;IAED,qCAAiB,GAAjB;QACQ,IAAA,KAA8C,IAAI,CAAC,KAAK,EAAtD,mBAAmB,yBAAA,EAAE,kBAAkB,wBAAe,CAAC;QAE/D,IAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,2BAA2B,CAAC,CAAC;QACxE,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC;gBACnC,WAAW,EAAE,WAA6B;gBAC1C,mBAAmB,EAAE,mBAAmB;gBACxC,kBAAkB,EAAE,kBAAkB;aACvC,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;SACzC;KACF;IAED,yCAAqB,GAArB,UAAsB,SAAyB;;QACvC,IAAA,KAAmD,IAAI,CAAC,KAAK,EAA3D,eAAe,qBAAA,EAAE,eAAe,qBAAA,EAAE,UAAU,gBAAe,CAAC;QACpE,IAAI,eAAe,KAAK,SAAS,CAAC,eAAe,EAAE;YACjD,MAAA,IAAI,CAAC,YAAY,0CAAE,kBAAkB,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;SAClE;QACD,IAAI,eAAe,KAAK,SAAS,CAAC,eAAe,EAAE;YACjD,MAAA,IAAI,CAAC,YAAY,0CAAE,kBAAkB,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;SAClE;QACD,IAAI,UAAU,KAAK,SAAS,CAAC,UAAU,EAAE;YACvC,MAAA,IAAI,CAAC,YAAY,0CAAE,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SAC5D;QACD,OAAO,KAAK,CAAC;KACd;IAED,wCAAoB,GAApB;;QACE,MAAA,IAAI,CAAC,YAAY,0CAAE,OAAO,EAAE,CAAC;KAC9B;IAED,0BAAM,GAAN;QACE,QACE,6BACE,SAAS,EAAC,0BAA0B,EACpC,KAAK,EAAE;gBACL,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,MAAM;aACd,GACD,EACF;KACH;IACH,gBAAC;AAAD,CAAC,CApDuB,KAAK,CAAC,SAAS;;;;"}